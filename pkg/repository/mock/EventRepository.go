// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"event-history/pkg/eventinfo/dto"
	"event-history/pkg/eventinfo/model"
	"event-history/pkg/repository"
	"sync"
)

// Ensure, that EventRepositoryMock does implement repository.EventRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.EventRepository = &EventRepositoryMock{}

// EventRepositoryMock is a mock implementation of repository.EventRepository.
//
// 	func TestSomethingThatUsesEventRepository(t *testing.T) {
//
// 		// make and configure a mocked repository.EventRepository
// 		mockedEventRepository := &EventRepositoryMock{
// 			CreateKeyFunc: func(ctx context.Context, eventInfo *model.EventSnapshot) error {
// 				panic("mock out the CreateKey method")
// 			},
// 			DeleteKeyFunc: func(ctx context.Context, query *dto.EventQuery) error {
// 				panic("mock out the DeleteKey method")
// 			},
// 			GetAnswerFunc: func(ctx context.Context, eventQuery *dto.EventQuery) (*model.EventSnapshot, error) {
// 				panic("mock out the GetAnswer method")
// 			},
// 			GetHistoryFunc: func(ctx context.Context, query *dto.EventQuery) ([]model.EventHistory, error) {
// 				panic("mock out the GetHistory method")
// 			},
// 			UpdateKeyFunc: func(ctx context.Context, info *model.EventSnapshot) error {
// 				panic("mock out the UpdateKey method")
// 			},
// 		}
//
// 		// use mockedEventRepository in code that requires repository.EventRepository
// 		// and then make assertions.
//
// 	}
type EventRepositoryMock struct {
	// CreateKeyFunc mocks the CreateKey method.
	CreateKeyFunc func(ctx context.Context, eventInfo *model.EventSnapshot) error

	// DeleteKeyFunc mocks the DeleteKey method.
	DeleteKeyFunc func(ctx context.Context, query *dto.EventQuery) error

	// GetAnswerFunc mocks the GetAnswer method.
	GetAnswerFunc func(ctx context.Context, eventQuery *dto.EventQuery) (*model.EventSnapshot, error)

	// GetHistoryFunc mocks the GetHistory method.
	GetHistoryFunc func(ctx context.Context, query *dto.EventQuery) ([]model.EventHistory, error)

	// UpdateKeyFunc mocks the UpdateKey method.
	UpdateKeyFunc func(ctx context.Context, info *model.EventSnapshot) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateKey holds details about calls to the CreateKey method.
		CreateKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventInfo is the eventInfo argument value.
			EventInfo *model.EventSnapshot
		}
		// DeleteKey holds details about calls to the DeleteKey method.
		DeleteKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query *dto.EventQuery
		}
		// GetAnswer holds details about calls to the GetAnswer method.
		GetAnswer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventQuery is the eventQuery argument value.
			EventQuery *dto.EventQuery
		}
		// GetHistory holds details about calls to the GetHistory method.
		GetHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query *dto.EventQuery
		}
		// UpdateKey holds details about calls to the UpdateKey method.
		UpdateKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Info is the info argument value.
			Info *model.EventSnapshot
		}
	}
	lockCreateKey  sync.RWMutex
	lockDeleteKey  sync.RWMutex
	lockGetAnswer  sync.RWMutex
	lockGetHistory sync.RWMutex
	lockUpdateKey  sync.RWMutex
}

// CreateKey calls CreateKeyFunc.
func (mock *EventRepositoryMock) CreateKey(ctx context.Context, eventInfo *model.EventSnapshot) error {
	if mock.CreateKeyFunc == nil {
		panic("EventRepositoryMock.CreateKeyFunc: method is nil but EventRepository.CreateKey was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		EventInfo *model.EventSnapshot
	}{
		Ctx:       ctx,
		EventInfo: eventInfo,
	}
	mock.lockCreateKey.Lock()
	mock.calls.CreateKey = append(mock.calls.CreateKey, callInfo)
	mock.lockCreateKey.Unlock()
	return mock.CreateKeyFunc(ctx, eventInfo)
}

// CreateKeyCalls gets all the calls that were made to CreateKey.
// Check the length with:
//     len(mockedEventRepository.CreateKeyCalls())
func (mock *EventRepositoryMock) CreateKeyCalls() []struct {
	Ctx       context.Context
	EventInfo *model.EventSnapshot
} {
	var calls []struct {
		Ctx       context.Context
		EventInfo *model.EventSnapshot
	}
	mock.lockCreateKey.RLock()
	calls = mock.calls.CreateKey
	mock.lockCreateKey.RUnlock()
	return calls
}

// DeleteKey calls DeleteKeyFunc.
func (mock *EventRepositoryMock) DeleteKey(ctx context.Context, query *dto.EventQuery) error {
	if mock.DeleteKeyFunc == nil {
		panic("EventRepositoryMock.DeleteKeyFunc: method is nil but EventRepository.DeleteKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query *dto.EventQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockDeleteKey.Lock()
	mock.calls.DeleteKey = append(mock.calls.DeleteKey, callInfo)
	mock.lockDeleteKey.Unlock()
	return mock.DeleteKeyFunc(ctx, query)
}

// DeleteKeyCalls gets all the calls that were made to DeleteKey.
// Check the length with:
//     len(mockedEventRepository.DeleteKeyCalls())
func (mock *EventRepositoryMock) DeleteKeyCalls() []struct {
	Ctx   context.Context
	Query *dto.EventQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query *dto.EventQuery
	}
	mock.lockDeleteKey.RLock()
	calls = mock.calls.DeleteKey
	mock.lockDeleteKey.RUnlock()
	return calls
}

// GetAnswer calls GetAnswerFunc.
func (mock *EventRepositoryMock) GetAnswer(ctx context.Context, eventQuery *dto.EventQuery) (*model.EventSnapshot, error) {
	if mock.GetAnswerFunc == nil {
		panic("EventRepositoryMock.GetAnswerFunc: method is nil but EventRepository.GetAnswer was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		EventQuery *dto.EventQuery
	}{
		Ctx:        ctx,
		EventQuery: eventQuery,
	}
	mock.lockGetAnswer.Lock()
	mock.calls.GetAnswer = append(mock.calls.GetAnswer, callInfo)
	mock.lockGetAnswer.Unlock()
	return mock.GetAnswerFunc(ctx, eventQuery)
}

// GetAnswerCalls gets all the calls that were made to GetAnswer.
// Check the length with:
//     len(mockedEventRepository.GetAnswerCalls())
func (mock *EventRepositoryMock) GetAnswerCalls() []struct {
	Ctx        context.Context
	EventQuery *dto.EventQuery
} {
	var calls []struct {
		Ctx        context.Context
		EventQuery *dto.EventQuery
	}
	mock.lockGetAnswer.RLock()
	calls = mock.calls.GetAnswer
	mock.lockGetAnswer.RUnlock()
	return calls
}

// GetHistory calls GetHistoryFunc.
func (mock *EventRepositoryMock) GetHistory(ctx context.Context, query *dto.EventQuery) ([]model.EventHistory, error) {
	if mock.GetHistoryFunc == nil {
		panic("EventRepositoryMock.GetHistoryFunc: method is nil but EventRepository.GetHistory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query *dto.EventQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockGetHistory.Lock()
	mock.calls.GetHistory = append(mock.calls.GetHistory, callInfo)
	mock.lockGetHistory.Unlock()
	return mock.GetHistoryFunc(ctx, query)
}

// GetHistoryCalls gets all the calls that were made to GetHistory.
// Check the length with:
//     len(mockedEventRepository.GetHistoryCalls())
func (mock *EventRepositoryMock) GetHistoryCalls() []struct {
	Ctx   context.Context
	Query *dto.EventQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query *dto.EventQuery
	}
	mock.lockGetHistory.RLock()
	calls = mock.calls.GetHistory
	mock.lockGetHistory.RUnlock()
	return calls
}

// UpdateKey calls UpdateKeyFunc.
func (mock *EventRepositoryMock) UpdateKey(ctx context.Context, info *model.EventSnapshot) error {
	if mock.UpdateKeyFunc == nil {
		panic("EventRepositoryMock.UpdateKeyFunc: method is nil but EventRepository.UpdateKey was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Info *model.EventSnapshot
	}{
		Ctx:  ctx,
		Info: info,
	}
	mock.lockUpdateKey.Lock()
	mock.calls.UpdateKey = append(mock.calls.UpdateKey, callInfo)
	mock.lockUpdateKey.Unlock()
	return mock.UpdateKeyFunc(ctx, info)
}

// UpdateKeyCalls gets all the calls that were made to UpdateKey.
// Check the length with:
//     len(mockedEventRepository.UpdateKeyCalls())
func (mock *EventRepositoryMock) UpdateKeyCalls() []struct {
	Ctx  context.Context
	Info *model.EventSnapshot
} {
	var calls []struct {
		Ctx  context.Context
		Info *model.EventSnapshot
	}
	mock.lockUpdateKey.RLock()
	calls = mock.calls.UpdateKey
	mock.lockUpdateKey.RUnlock()
	return calls
}
